// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Price.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto {

  /// <summary>Holder for reflection information generated from Price.proto</summary>
  public static partial class PriceReflection {

    #region Descriptor
    /// <summary>File descriptor for Price.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PriceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtQcmljZS5wcm90bxIFUHJvdG8iwwEKBVByaWNlEhIKCmluc3RydW1lbnQY",
            "ASABKAkSDAoEbGFzdBgCIAEoARILCgNiaWQYAyABKAESCwoDYXNrGAQgASgB",
            "EgwKBG9wZW4YBSABKAESDAoEaGlnaBgGIAEoARILCgNsb3cYByABKAESDQoF",
            "Y2xvc2UYCCABKAESDgoGYW1vdW50GAkgASgBEhIKCmJpZF92b2x1bWUYCiAB",
            "KAUSEgoKYXNrX3ZvbHVtZRgLIAEoBRIOCgZ2b2x1bWUYDCABKAViBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Price), global::Proto.Price.Parser, new[]{ "Instrument", "Last", "Bid", "Ask", "Open", "High", "Low", "Close", "Amount", "BidVolume", "AskVolume", "Volume" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Price : pb::IMessage<Price> {
    private static readonly pb::MessageParser<Price> _parser = new pb::MessageParser<Price>(() => new Price());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Price> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PriceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Price() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Price(Price other) : this() {
      instrument_ = other.instrument_;
      last_ = other.last_;
      bid_ = other.bid_;
      ask_ = other.ask_;
      open_ = other.open_;
      high_ = other.high_;
      low_ = other.low_;
      close_ = other.close_;
      amount_ = other.amount_;
      bidVolume_ = other.bidVolume_;
      askVolume_ = other.askVolume_;
      volume_ = other.volume_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Price Clone() {
      return new Price(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private string instrument_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Instrument {
      get { return instrument_; }
      set {
        instrument_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last" field.</summary>
    public const int LastFieldNumber = 2;
    private double last_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Last {
      get { return last_; }
      set {
        last_ = value;
      }
    }

    /// <summary>Field number for the "bid" field.</summary>
    public const int BidFieldNumber = 3;
    private double bid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Bid {
      get { return bid_; }
      set {
        bid_ = value;
      }
    }

    /// <summary>Field number for the "ask" field.</summary>
    public const int AskFieldNumber = 4;
    private double ask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ask {
      get { return ask_; }
      set {
        ask_ = value;
      }
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 5;
    private double open_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    /// <summary>Field number for the "high" field.</summary>
    public const int HighFieldNumber = 6;
    private double high_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double High {
      get { return high_; }
      set {
        high_ = value;
      }
    }

    /// <summary>Field number for the "low" field.</summary>
    public const int LowFieldNumber = 7;
    private double low_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Low {
      get { return low_; }
      set {
        low_ = value;
      }
    }

    /// <summary>Field number for the "close" field.</summary>
    public const int CloseFieldNumber = 8;
    private double close_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Close {
      get { return close_; }
      set {
        close_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 9;
    private double amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "bid_volume" field.</summary>
    public const int BidVolumeFieldNumber = 10;
    private int bidVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BidVolume {
      get { return bidVolume_; }
      set {
        bidVolume_ = value;
      }
    }

    /// <summary>Field number for the "ask_volume" field.</summary>
    public const int AskVolumeFieldNumber = 11;
    private int askVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AskVolume {
      get { return askVolume_; }
      set {
        askVolume_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 12;
    private int volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Price);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Price other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Instrument != other.Instrument) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Last, other.Last)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Bid, other.Bid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Ask, other.Ask)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Open, other.Open)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(High, other.High)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Low, other.Low)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Close, other.Close)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Amount, other.Amount)) return false;
      if (BidVolume != other.BidVolume) return false;
      if (AskVolume != other.AskVolume) return false;
      if (Volume != other.Volume) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Instrument.Length != 0) hash ^= Instrument.GetHashCode();
      if (Last != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Last);
      if (Bid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Bid);
      if (Ask != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Ask);
      if (Open != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Open);
      if (High != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(High);
      if (Low != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Low);
      if (Close != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Close);
      if (Amount != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Amount);
      if (BidVolume != 0) hash ^= BidVolume.GetHashCode();
      if (AskVolume != 0) hash ^= AskVolume.GetHashCode();
      if (Volume != 0) hash ^= Volume.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Instrument.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Instrument);
      }
      if (Last != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Last);
      }
      if (Bid != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Bid);
      }
      if (Ask != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Ask);
      }
      if (Open != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Open);
      }
      if (High != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(High);
      }
      if (Low != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Low);
      }
      if (Close != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Close);
      }
      if (Amount != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Amount);
      }
      if (BidVolume != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(BidVolume);
      }
      if (AskVolume != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(AskVolume);
      }
      if (Volume != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Volume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Instrument.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Instrument);
      }
      if (Last != 0D) {
        size += 1 + 8;
      }
      if (Bid != 0D) {
        size += 1 + 8;
      }
      if (Ask != 0D) {
        size += 1 + 8;
      }
      if (Open != 0D) {
        size += 1 + 8;
      }
      if (High != 0D) {
        size += 1 + 8;
      }
      if (Low != 0D) {
        size += 1 + 8;
      }
      if (Close != 0D) {
        size += 1 + 8;
      }
      if (Amount != 0D) {
        size += 1 + 8;
      }
      if (BidVolume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BidVolume);
      }
      if (AskVolume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AskVolume);
      }
      if (Volume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Volume);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Price other) {
      if (other == null) {
        return;
      }
      if (other.Instrument.Length != 0) {
        Instrument = other.Instrument;
      }
      if (other.Last != 0D) {
        Last = other.Last;
      }
      if (other.Bid != 0D) {
        Bid = other.Bid;
      }
      if (other.Ask != 0D) {
        Ask = other.Ask;
      }
      if (other.Open != 0D) {
        Open = other.Open;
      }
      if (other.High != 0D) {
        High = other.High;
      }
      if (other.Low != 0D) {
        Low = other.Low;
      }
      if (other.Close != 0D) {
        Close = other.Close;
      }
      if (other.Amount != 0D) {
        Amount = other.Amount;
      }
      if (other.BidVolume != 0) {
        BidVolume = other.BidVolume;
      }
      if (other.AskVolume != 0) {
        AskVolume = other.AskVolume;
      }
      if (other.Volume != 0) {
        Volume = other.Volume;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Instrument = input.ReadString();
            break;
          }
          case 17: {
            Last = input.ReadDouble();
            break;
          }
          case 25: {
            Bid = input.ReadDouble();
            break;
          }
          case 33: {
            Ask = input.ReadDouble();
            break;
          }
          case 41: {
            Open = input.ReadDouble();
            break;
          }
          case 49: {
            High = input.ReadDouble();
            break;
          }
          case 57: {
            Low = input.ReadDouble();
            break;
          }
          case 65: {
            Close = input.ReadDouble();
            break;
          }
          case 73: {
            Amount = input.ReadDouble();
            break;
          }
          case 80: {
            BidVolume = input.ReadInt32();
            break;
          }
          case 88: {
            AskVolume = input.ReadInt32();
            break;
          }
          case 96: {
            Volume = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

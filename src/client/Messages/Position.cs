// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Position.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto {

  /// <summary>Holder for reflection information generated from Position.proto</summary>
  public static partial class PositionReflection {

    #region Descriptor
    /// <summary>File descriptor for Position.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PositionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5Qb3NpdGlvbi5wcm90bxIFcHJvdG8iowEKCFBvc2l0aW9uEhIKCmluc3Ry",
            "dW1lbnQYASABKAkSEgoKdG90YWxfbG9uZxgCIAEoBRITCgtsaXF1aWRfbG9u",
            "ZxgDIAEoBRIWCg55ZXN0ZXJkYXlfbG9uZxgEIAEoBRITCgt0b3RhbF9zaG9y",
            "dBgFIAEoBRIUCgxsaXF1aWRfc2hvcnQYBiABKAUSFwoPeWVzdGVyZGF5X3No",
            "b3J0GAcgASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Position), global::Proto.Position.Parser, new[]{ "Instrument", "TotalLong", "LiquidLong", "YesterdayLong", "TotalShort", "LiquidShort", "YesterdayShort" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Position : pb::IMessage<Position> {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.PositionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position(Position other) : this() {
      instrument_ = other.instrument_;
      totalLong_ = other.totalLong_;
      liquidLong_ = other.liquidLong_;
      yesterdayLong_ = other.yesterdayLong_;
      totalShort_ = other.totalShort_;
      liquidShort_ = other.liquidShort_;
      yesterdayShort_ = other.yesterdayShort_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position Clone() {
      return new Position(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private string instrument_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Instrument {
      get { return instrument_; }
      set {
        instrument_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_long" field.</summary>
    public const int TotalLongFieldNumber = 2;
    private int totalLong_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalLong {
      get { return totalLong_; }
      set {
        totalLong_ = value;
      }
    }

    /// <summary>Field number for the "liquid_long" field.</summary>
    public const int LiquidLongFieldNumber = 3;
    private int liquidLong_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LiquidLong {
      get { return liquidLong_; }
      set {
        liquidLong_ = value;
      }
    }

    /// <summary>Field number for the "yesterday_long" field.</summary>
    public const int YesterdayLongFieldNumber = 4;
    private int yesterdayLong_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int YesterdayLong {
      get { return yesterdayLong_; }
      set {
        yesterdayLong_ = value;
      }
    }

    /// <summary>Field number for the "total_short" field.</summary>
    public const int TotalShortFieldNumber = 5;
    private int totalShort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalShort {
      get { return totalShort_; }
      set {
        totalShort_ = value;
      }
    }

    /// <summary>Field number for the "liquid_short" field.</summary>
    public const int LiquidShortFieldNumber = 6;
    private int liquidShort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LiquidShort {
      get { return liquidShort_; }
      set {
        liquidShort_ = value;
      }
    }

    /// <summary>Field number for the "yesterday_short" field.</summary>
    public const int YesterdayShortFieldNumber = 7;
    private int yesterdayShort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int YesterdayShort {
      get { return yesterdayShort_; }
      set {
        yesterdayShort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Instrument != other.Instrument) return false;
      if (TotalLong != other.TotalLong) return false;
      if (LiquidLong != other.LiquidLong) return false;
      if (YesterdayLong != other.YesterdayLong) return false;
      if (TotalShort != other.TotalShort) return false;
      if (LiquidShort != other.LiquidShort) return false;
      if (YesterdayShort != other.YesterdayShort) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Instrument.Length != 0) hash ^= Instrument.GetHashCode();
      if (TotalLong != 0) hash ^= TotalLong.GetHashCode();
      if (LiquidLong != 0) hash ^= LiquidLong.GetHashCode();
      if (YesterdayLong != 0) hash ^= YesterdayLong.GetHashCode();
      if (TotalShort != 0) hash ^= TotalShort.GetHashCode();
      if (LiquidShort != 0) hash ^= LiquidShort.GetHashCode();
      if (YesterdayShort != 0) hash ^= YesterdayShort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Instrument.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Instrument);
      }
      if (TotalLong != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalLong);
      }
      if (LiquidLong != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LiquidLong);
      }
      if (YesterdayLong != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(YesterdayLong);
      }
      if (TotalShort != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TotalShort);
      }
      if (LiquidShort != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LiquidShort);
      }
      if (YesterdayShort != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(YesterdayShort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Instrument.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Instrument);
      }
      if (TotalLong != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalLong);
      }
      if (LiquidLong != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LiquidLong);
      }
      if (YesterdayLong != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(YesterdayLong);
      }
      if (TotalShort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalShort);
      }
      if (LiquidShort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LiquidShort);
      }
      if (YesterdayShort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(YesterdayShort);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      if (other.Instrument.Length != 0) {
        Instrument = other.Instrument;
      }
      if (other.TotalLong != 0) {
        TotalLong = other.TotalLong;
      }
      if (other.LiquidLong != 0) {
        LiquidLong = other.LiquidLong;
      }
      if (other.YesterdayLong != 0) {
        YesterdayLong = other.YesterdayLong;
      }
      if (other.TotalShort != 0) {
        TotalShort = other.TotalShort;
      }
      if (other.LiquidShort != 0) {
        LiquidShort = other.LiquidShort;
      }
      if (other.YesterdayShort != 0) {
        YesterdayShort = other.YesterdayShort;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Instrument = input.ReadString();
            break;
          }
          case 16: {
            TotalLong = input.ReadInt32();
            break;
          }
          case 24: {
            LiquidLong = input.ReadInt32();
            break;
          }
          case 32: {
            YesterdayLong = input.ReadInt32();
            break;
          }
          case 40: {
            TotalShort = input.ReadInt32();
            break;
          }
          case 48: {
            LiquidShort = input.ReadInt32();
            break;
          }
          case 56: {
            YesterdayShort = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

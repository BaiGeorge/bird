// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Volatility.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto {

  /// <summary>Holder for reflection information generated from Volatility.proto</summary>
  public static partial class VolatilityReflection {

    #region Descriptor
    /// <summary>File descriptor for Volatility.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VolatilityReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBWb2xhdGlsaXR5LnByb3RvEgVQcm90bxoNUmVxdWVzdC5wcm90bxoLUmVw",
            "bHkucHJvdG8iNAoKVm9sYXRpbGl0eRISCgppbnN0cnVtZW50GAEgASgJEhIK",
            "CnZvbGF0aWxpdHkYAiABKAEifAoNVm9sYXRpbGl0eVJlcRIgCgR0eXBlGAEg",
            "ASgOMhIuUHJvdG8uUmVxdWVzdFR5cGUSJwoMdm9sYXRpbGl0aWVzGAIgAygL",
            "MhEuUHJvdG8uVm9sYXRpbGl0eRISCgppbnN0cnVtZW50GAMgASgJEgwKBHVz",
            "ZXIYBCABKAkiVgoNVm9sYXRpbGl0eVJlcBInCgx2b2xhdGlsaXRpZXMYASAD",
            "KAsyES5Qcm90by5Wb2xhdGlsaXR5EhwKBnJlc3VsdBgCIAEoCzIMLlByb3Rv",
            "LlJlcGx5IqACCg9Wb2xhdGlsaXR5Q3VydmUSEgoKdW5kZXJseWluZxgBIAEo",
            "CRIQCghtYXR1cml0eRgCIAEoCRIMCgRzcG90GAMgASgBEg8KB2F0bV92b2wY",
            "BCABKAESDAoEc2tldxgFIAEoARITCgtjYWxsX2NvbnZleBgGIAEoARISCgpw",
            "dXRfY29udmV4GAcgASgBEhIKCmNhbGxfc2xvcGUYCCABKAESEQoJcHV0X3Ns",
            "b3BlGAkgASgBEhMKC2NhbGxfY3V0b2ZmGAogASgBEhIKCnB1dF9jdXRvZmYY",
            "CyABKAESCwoDdmNyGAwgASgBEgsKA3NjchgNIAEoARILCgNjY3IYDiABKAES",
            "DAoEc3BjchgPIAEoARIMCgRzY2NyGBAgASgBIoABChJWb2xhdGlsaXR5Q3Vy",
            "dmVSZXESIAoEdHlwZRgBIAEoDjISLlByb3RvLlJlcXVlc3RUeXBlEhIKCnVu",
            "ZGVybHlpbmcYAiABKAkSJgoGY3VydmVzGAMgAygLMhYuUHJvdG8uVm9sYXRp",
            "bGl0eUN1cnZlEgwKBHVzZXIYBCABKAkiWgoSVm9sYXRpbGl0eUN1cnZlUmVw",
            "EiYKBmN1cnZlcxgBIAMoCzIWLlByb3RvLlZvbGF0aWxpdHlDdXJ2ZRIcCgZy",
            "ZXN1bHQYAiABKAsyDC5Qcm90by5SZXBseWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.RequestReflection.Descriptor, global::Proto.ReplyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Volatility), global::Proto.Volatility.Parser, new[]{ "Instrument", "Volatility_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.VolatilityReq), global::Proto.VolatilityReq.Parser, new[]{ "Type", "Volatilities", "Instrument", "User" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.VolatilityRep), global::Proto.VolatilityRep.Parser, new[]{ "Volatilities", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.VolatilityCurve), global::Proto.VolatilityCurve.Parser, new[]{ "Underlying", "Maturity", "Spot", "AtmVol", "Skew", "CallConvex", "PutConvex", "CallSlope", "PutSlope", "CallCutoff", "PutCutoff", "Vcr", "Scr", "Ccr", "Spcr", "Sccr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.VolatilityCurveReq), global::Proto.VolatilityCurveReq.Parser, new[]{ "Type", "Underlying", "Curves", "User" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.VolatilityCurveRep), global::Proto.VolatilityCurveRep.Parser, new[]{ "Curves", "Result" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Volatility : pb::IMessage<Volatility> {
    private static readonly pb::MessageParser<Volatility> _parser = new pb::MessageParser<Volatility>(() => new Volatility());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Volatility> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.VolatilityReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Volatility() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Volatility(Volatility other) : this() {
      instrument_ = other.instrument_;
      volatility_ = other.volatility_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Volatility Clone() {
      return new Volatility(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private string instrument_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Instrument {
      get { return instrument_; }
      set {
        instrument_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "volatility" field.</summary>
    public const int Volatility_FieldNumber = 2;
    private double volatility_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Volatility_ {
      get { return volatility_; }
      set {
        volatility_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Volatility);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Volatility other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Instrument != other.Instrument) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Volatility_, other.Volatility_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Instrument.Length != 0) hash ^= Instrument.GetHashCode();
      if (Volatility_ != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Volatility_);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Instrument.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Instrument);
      }
      if (Volatility_ != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Volatility_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Instrument.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Instrument);
      }
      if (Volatility_ != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Volatility other) {
      if (other == null) {
        return;
      }
      if (other.Instrument.Length != 0) {
        Instrument = other.Instrument;
      }
      if (other.Volatility_ != 0D) {
        Volatility_ = other.Volatility_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Instrument = input.ReadString();
            break;
          }
          case 17: {
            Volatility_ = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VolatilityReq : pb::IMessage<VolatilityReq> {
    private static readonly pb::MessageParser<VolatilityReq> _parser = new pb::MessageParser<VolatilityReq>(() => new VolatilityReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VolatilityReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.VolatilityReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolatilityReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolatilityReq(VolatilityReq other) : this() {
      type_ = other.type_;
      volatilities_ = other.volatilities_.Clone();
      instrument_ = other.instrument_;
      user_ = other.user_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolatilityReq Clone() {
      return new VolatilityReq(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Proto.RequestType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.RequestType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "volatilities" field.</summary>
    public const int VolatilitiesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto.Volatility> _repeated_volatilities_codec
        = pb::FieldCodec.ForMessage(18, global::Proto.Volatility.Parser);
    private readonly pbc::RepeatedField<global::Proto.Volatility> volatilities_ = new pbc::RepeatedField<global::Proto.Volatility>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Volatility> Volatilities {
      get { return volatilities_; }
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 3;
    private string instrument_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Instrument {
      get { return instrument_; }
      set {
        instrument_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 4;
    private string user_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User {
      get { return user_; }
      set {
        user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VolatilityReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VolatilityReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!volatilities_.Equals(other.volatilities_)) return false;
      if (Instrument != other.Instrument) return false;
      if (User != other.User) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= volatilities_.GetHashCode();
      if (Instrument.Length != 0) hash ^= Instrument.GetHashCode();
      if (User.Length != 0) hash ^= User.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      volatilities_.WriteTo(output, _repeated_volatilities_codec);
      if (Instrument.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Instrument);
      }
      if (User.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(User);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += volatilities_.CalculateSize(_repeated_volatilities_codec);
      if (Instrument.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Instrument);
      }
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VolatilityReq other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      volatilities_.Add(other.volatilities_);
      if (other.Instrument.Length != 0) {
        Instrument = other.Instrument;
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::Proto.RequestType) input.ReadEnum();
            break;
          }
          case 18: {
            volatilities_.AddEntriesFrom(input, _repeated_volatilities_codec);
            break;
          }
          case 26: {
            Instrument = input.ReadString();
            break;
          }
          case 34: {
            User = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VolatilityRep : pb::IMessage<VolatilityRep> {
    private static readonly pb::MessageParser<VolatilityRep> _parser = new pb::MessageParser<VolatilityRep>(() => new VolatilityRep());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VolatilityRep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.VolatilityReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolatilityRep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolatilityRep(VolatilityRep other) : this() {
      volatilities_ = other.volatilities_.Clone();
      Result = other.result_ != null ? other.Result.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolatilityRep Clone() {
      return new VolatilityRep(this);
    }

    /// <summary>Field number for the "volatilities" field.</summary>
    public const int VolatilitiesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.Volatility> _repeated_volatilities_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.Volatility.Parser);
    private readonly pbc::RepeatedField<global::Proto.Volatility> volatilities_ = new pbc::RepeatedField<global::Proto.Volatility>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Volatility> Volatilities {
      get { return volatilities_; }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Proto.Reply result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Reply Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VolatilityRep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VolatilityRep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!volatilities_.Equals(other.volatilities_)) return false;
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= volatilities_.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      volatilities_.WriteTo(output, _repeated_volatilities_codec);
      if (result_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += volatilities_.CalculateSize(_repeated_volatilities_codec);
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VolatilityRep other) {
      if (other == null) {
        return;
      }
      volatilities_.Add(other.volatilities_);
      if (other.result_ != null) {
        if (result_ == null) {
          result_ = new global::Proto.Reply();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            volatilities_.AddEntriesFrom(input, _repeated_volatilities_codec);
            break;
          }
          case 18: {
            if (result_ == null) {
              result_ = new global::Proto.Reply();
            }
            input.ReadMessage(result_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VolatilityCurve : pb::IMessage<VolatilityCurve> {
    private static readonly pb::MessageParser<VolatilityCurve> _parser = new pb::MessageParser<VolatilityCurve>(() => new VolatilityCurve());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VolatilityCurve> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.VolatilityReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolatilityCurve() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolatilityCurve(VolatilityCurve other) : this() {
      underlying_ = other.underlying_;
      maturity_ = other.maturity_;
      spot_ = other.spot_;
      atmVol_ = other.atmVol_;
      skew_ = other.skew_;
      callConvex_ = other.callConvex_;
      putConvex_ = other.putConvex_;
      callSlope_ = other.callSlope_;
      putSlope_ = other.putSlope_;
      callCutoff_ = other.callCutoff_;
      putCutoff_ = other.putCutoff_;
      vcr_ = other.vcr_;
      scr_ = other.scr_;
      ccr_ = other.ccr_;
      spcr_ = other.spcr_;
      sccr_ = other.sccr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolatilityCurve Clone() {
      return new VolatilityCurve(this);
    }

    /// <summary>Field number for the "underlying" field.</summary>
    public const int UnderlyingFieldNumber = 1;
    private string underlying_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Underlying {
      get { return underlying_; }
      set {
        underlying_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maturity" field.</summary>
    public const int MaturityFieldNumber = 2;
    private string maturity_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Maturity {
      get { return maturity_; }
      set {
        maturity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spot" field.</summary>
    public const int SpotFieldNumber = 3;
    private double spot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Spot {
      get { return spot_; }
      set {
        spot_ = value;
      }
    }

    /// <summary>Field number for the "atm_vol" field.</summary>
    public const int AtmVolFieldNumber = 4;
    private double atmVol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AtmVol {
      get { return atmVol_; }
      set {
        atmVol_ = value;
      }
    }

    /// <summary>Field number for the "skew" field.</summary>
    public const int SkewFieldNumber = 5;
    private double skew_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Skew {
      get { return skew_; }
      set {
        skew_ = value;
      }
    }

    /// <summary>Field number for the "call_convex" field.</summary>
    public const int CallConvexFieldNumber = 6;
    private double callConvex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CallConvex {
      get { return callConvex_; }
      set {
        callConvex_ = value;
      }
    }

    /// <summary>Field number for the "put_convex" field.</summary>
    public const int PutConvexFieldNumber = 7;
    private double putConvex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PutConvex {
      get { return putConvex_; }
      set {
        putConvex_ = value;
      }
    }

    /// <summary>Field number for the "call_slope" field.</summary>
    public const int CallSlopeFieldNumber = 8;
    private double callSlope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CallSlope {
      get { return callSlope_; }
      set {
        callSlope_ = value;
      }
    }

    /// <summary>Field number for the "put_slope" field.</summary>
    public const int PutSlopeFieldNumber = 9;
    private double putSlope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PutSlope {
      get { return putSlope_; }
      set {
        putSlope_ = value;
      }
    }

    /// <summary>Field number for the "call_cutoff" field.</summary>
    public const int CallCutoffFieldNumber = 10;
    private double callCutoff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CallCutoff {
      get { return callCutoff_; }
      set {
        callCutoff_ = value;
      }
    }

    /// <summary>Field number for the "put_cutoff" field.</summary>
    public const int PutCutoffFieldNumber = 11;
    private double putCutoff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PutCutoff {
      get { return putCutoff_; }
      set {
        putCutoff_ = value;
      }
    }

    /// <summary>Field number for the "vcr" field.</summary>
    public const int VcrFieldNumber = 12;
    private double vcr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Vcr {
      get { return vcr_; }
      set {
        vcr_ = value;
      }
    }

    /// <summary>Field number for the "scr" field.</summary>
    public const int ScrFieldNumber = 13;
    private double scr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Scr {
      get { return scr_; }
      set {
        scr_ = value;
      }
    }

    /// <summary>Field number for the "ccr" field.</summary>
    public const int CcrFieldNumber = 14;
    private double ccr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ccr {
      get { return ccr_; }
      set {
        ccr_ = value;
      }
    }

    /// <summary>Field number for the "spcr" field.</summary>
    public const int SpcrFieldNumber = 15;
    private double spcr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Spcr {
      get { return spcr_; }
      set {
        spcr_ = value;
      }
    }

    /// <summary>Field number for the "sccr" field.</summary>
    public const int SccrFieldNumber = 16;
    private double sccr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Sccr {
      get { return sccr_; }
      set {
        sccr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VolatilityCurve);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VolatilityCurve other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Underlying != other.Underlying) return false;
      if (Maturity != other.Maturity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Spot, other.Spot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AtmVol, other.AtmVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Skew, other.Skew)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CallConvex, other.CallConvex)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PutConvex, other.PutConvex)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CallSlope, other.CallSlope)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PutSlope, other.PutSlope)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CallCutoff, other.CallCutoff)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PutCutoff, other.PutCutoff)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Vcr, other.Vcr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Scr, other.Scr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Ccr, other.Ccr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Spcr, other.Spcr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Sccr, other.Sccr)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Underlying.Length != 0) hash ^= Underlying.GetHashCode();
      if (Maturity.Length != 0) hash ^= Maturity.GetHashCode();
      if (Spot != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Spot);
      if (AtmVol != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AtmVol);
      if (Skew != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Skew);
      if (CallConvex != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CallConvex);
      if (PutConvex != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PutConvex);
      if (CallSlope != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CallSlope);
      if (PutSlope != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PutSlope);
      if (CallCutoff != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CallCutoff);
      if (PutCutoff != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PutCutoff);
      if (Vcr != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Vcr);
      if (Scr != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Scr);
      if (Ccr != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Ccr);
      if (Spcr != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Spcr);
      if (Sccr != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Sccr);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Underlying.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Underlying);
      }
      if (Maturity.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Maturity);
      }
      if (Spot != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Spot);
      }
      if (AtmVol != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(AtmVol);
      }
      if (Skew != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Skew);
      }
      if (CallConvex != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(CallConvex);
      }
      if (PutConvex != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(PutConvex);
      }
      if (CallSlope != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(CallSlope);
      }
      if (PutSlope != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(PutSlope);
      }
      if (CallCutoff != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(CallCutoff);
      }
      if (PutCutoff != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(PutCutoff);
      }
      if (Vcr != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(Vcr);
      }
      if (Scr != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(Scr);
      }
      if (Ccr != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(Ccr);
      }
      if (Spcr != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(Spcr);
      }
      if (Sccr != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(Sccr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Underlying.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Underlying);
      }
      if (Maturity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Maturity);
      }
      if (Spot != 0D) {
        size += 1 + 8;
      }
      if (AtmVol != 0D) {
        size += 1 + 8;
      }
      if (Skew != 0D) {
        size += 1 + 8;
      }
      if (CallConvex != 0D) {
        size += 1 + 8;
      }
      if (PutConvex != 0D) {
        size += 1 + 8;
      }
      if (CallSlope != 0D) {
        size += 1 + 8;
      }
      if (PutSlope != 0D) {
        size += 1 + 8;
      }
      if (CallCutoff != 0D) {
        size += 1 + 8;
      }
      if (PutCutoff != 0D) {
        size += 1 + 8;
      }
      if (Vcr != 0D) {
        size += 1 + 8;
      }
      if (Scr != 0D) {
        size += 1 + 8;
      }
      if (Ccr != 0D) {
        size += 1 + 8;
      }
      if (Spcr != 0D) {
        size += 1 + 8;
      }
      if (Sccr != 0D) {
        size += 2 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VolatilityCurve other) {
      if (other == null) {
        return;
      }
      if (other.Underlying.Length != 0) {
        Underlying = other.Underlying;
      }
      if (other.Maturity.Length != 0) {
        Maturity = other.Maturity;
      }
      if (other.Spot != 0D) {
        Spot = other.Spot;
      }
      if (other.AtmVol != 0D) {
        AtmVol = other.AtmVol;
      }
      if (other.Skew != 0D) {
        Skew = other.Skew;
      }
      if (other.CallConvex != 0D) {
        CallConvex = other.CallConvex;
      }
      if (other.PutConvex != 0D) {
        PutConvex = other.PutConvex;
      }
      if (other.CallSlope != 0D) {
        CallSlope = other.CallSlope;
      }
      if (other.PutSlope != 0D) {
        PutSlope = other.PutSlope;
      }
      if (other.CallCutoff != 0D) {
        CallCutoff = other.CallCutoff;
      }
      if (other.PutCutoff != 0D) {
        PutCutoff = other.PutCutoff;
      }
      if (other.Vcr != 0D) {
        Vcr = other.Vcr;
      }
      if (other.Scr != 0D) {
        Scr = other.Scr;
      }
      if (other.Ccr != 0D) {
        Ccr = other.Ccr;
      }
      if (other.Spcr != 0D) {
        Spcr = other.Spcr;
      }
      if (other.Sccr != 0D) {
        Sccr = other.Sccr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Underlying = input.ReadString();
            break;
          }
          case 18: {
            Maturity = input.ReadString();
            break;
          }
          case 25: {
            Spot = input.ReadDouble();
            break;
          }
          case 33: {
            AtmVol = input.ReadDouble();
            break;
          }
          case 41: {
            Skew = input.ReadDouble();
            break;
          }
          case 49: {
            CallConvex = input.ReadDouble();
            break;
          }
          case 57: {
            PutConvex = input.ReadDouble();
            break;
          }
          case 65: {
            CallSlope = input.ReadDouble();
            break;
          }
          case 73: {
            PutSlope = input.ReadDouble();
            break;
          }
          case 81: {
            CallCutoff = input.ReadDouble();
            break;
          }
          case 89: {
            PutCutoff = input.ReadDouble();
            break;
          }
          case 97: {
            Vcr = input.ReadDouble();
            break;
          }
          case 105: {
            Scr = input.ReadDouble();
            break;
          }
          case 113: {
            Ccr = input.ReadDouble();
            break;
          }
          case 121: {
            Spcr = input.ReadDouble();
            break;
          }
          case 129: {
            Sccr = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VolatilityCurveReq : pb::IMessage<VolatilityCurveReq> {
    private static readonly pb::MessageParser<VolatilityCurveReq> _parser = new pb::MessageParser<VolatilityCurveReq>(() => new VolatilityCurveReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VolatilityCurveReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.VolatilityReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolatilityCurveReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolatilityCurveReq(VolatilityCurveReq other) : this() {
      type_ = other.type_;
      underlying_ = other.underlying_;
      curves_ = other.curves_.Clone();
      user_ = other.user_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolatilityCurveReq Clone() {
      return new VolatilityCurveReq(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Proto.RequestType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.RequestType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "underlying" field.</summary>
    public const int UnderlyingFieldNumber = 2;
    private string underlying_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Underlying {
      get { return underlying_; }
      set {
        underlying_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "curves" field.</summary>
    public const int CurvesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Proto.VolatilityCurve> _repeated_curves_codec
        = pb::FieldCodec.ForMessage(26, global::Proto.VolatilityCurve.Parser);
    private readonly pbc::RepeatedField<global::Proto.VolatilityCurve> curves_ = new pbc::RepeatedField<global::Proto.VolatilityCurve>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.VolatilityCurve> Curves {
      get { return curves_; }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 4;
    private string user_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User {
      get { return user_; }
      set {
        user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VolatilityCurveReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VolatilityCurveReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Underlying != other.Underlying) return false;
      if(!curves_.Equals(other.curves_)) return false;
      if (User != other.User) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Underlying.Length != 0) hash ^= Underlying.GetHashCode();
      hash ^= curves_.GetHashCode();
      if (User.Length != 0) hash ^= User.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Underlying.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Underlying);
      }
      curves_.WriteTo(output, _repeated_curves_codec);
      if (User.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(User);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Underlying.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Underlying);
      }
      size += curves_.CalculateSize(_repeated_curves_codec);
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VolatilityCurveReq other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Underlying.Length != 0) {
        Underlying = other.Underlying;
      }
      curves_.Add(other.curves_);
      if (other.User.Length != 0) {
        User = other.User;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::Proto.RequestType) input.ReadEnum();
            break;
          }
          case 18: {
            Underlying = input.ReadString();
            break;
          }
          case 26: {
            curves_.AddEntriesFrom(input, _repeated_curves_codec);
            break;
          }
          case 34: {
            User = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VolatilityCurveRep : pb::IMessage<VolatilityCurveRep> {
    private static readonly pb::MessageParser<VolatilityCurveRep> _parser = new pb::MessageParser<VolatilityCurveRep>(() => new VolatilityCurveRep());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VolatilityCurveRep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.VolatilityReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolatilityCurveRep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolatilityCurveRep(VolatilityCurveRep other) : this() {
      curves_ = other.curves_.Clone();
      Result = other.result_ != null ? other.Result.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolatilityCurveRep Clone() {
      return new VolatilityCurveRep(this);
    }

    /// <summary>Field number for the "curves" field.</summary>
    public const int CurvesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.VolatilityCurve> _repeated_curves_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.VolatilityCurve.Parser);
    private readonly pbc::RepeatedField<global::Proto.VolatilityCurve> curves_ = new pbc::RepeatedField<global::Proto.VolatilityCurve>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.VolatilityCurve> Curves {
      get { return curves_; }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Proto.Reply result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Reply Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VolatilityCurveRep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VolatilityCurveRep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!curves_.Equals(other.curves_)) return false;
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= curves_.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      curves_.WriteTo(output, _repeated_curves_codec);
      if (result_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += curves_.CalculateSize(_repeated_curves_codec);
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VolatilityCurveRep other) {
      if (other == null) {
        return;
      }
      curves_.Add(other.curves_);
      if (other.result_ != null) {
        if (result_ == null) {
          result_ = new global::Proto.Reply();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            curves_.AddEntriesFrom(input, _repeated_curves_codec);
            break;
          }
          case 18: {
            if (result_ == null) {
              result_ = new global::Proto.Reply();
            }
            input.ReadMessage(result_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
